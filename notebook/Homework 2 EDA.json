{
	"name": "Homework 2 EDA",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "openweather",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b25707b4-cc66-464c-baf6-c2581743403a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5d043d5b-a1ca-4e81-88e6-fac0964cefde/resourceGroups/DS598-Anthony-Huang/providers/Microsoft.Synapse/workspaces/anthonyhuangsynapse/bigDataPools/openweather",
				"name": "openweather",
				"type": "Spark",
				"endpoint": "https://anthonyhuangsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/openweather",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Set up the configuration for accessing the storage account\n",
					"storage_account_name = \"sqladminuser\"\n",
					"storage_account_key = \"sqladminpassword123#\"\n",
					"\n",
					"spark.conf.set(\n",
					"    \"fs.azure.account.key.\" + storage_account_name + \".dfs.core.windows.net\",\n",
					"    storage_account_key\n",
					")\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Read data directly from ADLS Gen2\n",
					"container_name = \"ds598anthonyhuangblobcontainer\"\n",
					"air_pollution_folder_path = \"bronze/data/2.5/air_pollution\"  # Folder, not a single file\n",
					"historical_weather_folder_path = \"bronze\"\n",
					"\n",
					"# Read all JSON files in the folder\n",
					"air_pollution_df = spark.read.json(f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{air_pollution_folder_path}\")\n",
					"historical_weather_df = spark.read.json(f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{historical_weather_folder_path}\")\n",
					"# Show the DataFrame"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"   historical_weather_df.head()\n",
					"\n",
					"   air_pollution_df.head()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Display schema for weather data\n",
					"#ex: ____.printSchema()\n",
					"# Display schema for air pollution data\n",
					"\n",
					"# Convert Spark DataFrame to Pandas DataFrame for summary statistics (.toPandas())\n",
					"\n",
					"# Summary statistics for weather data\n",
					"\n",
					"# Summary statistics for air pollution data\n",
					"\n",
					"\n",
					"#Use built-in visualization tools in Synapse notebooks or use external libraries like matplotlib, seaborn, or plotly.\n",
					"#Minimum of 4 different types of visualizations.\n",
					"#Examples: Distribution of temperature (with weather data), Distribution of AQI (air pollution data),\n",
					"#Scatter plot of temperature vs humidity (weather data), Scatter plot of AQI vs CO (air pollution data).\n",
					"#Terminate the Cluster Stop your session once completed with all the tasks."
				],
				"execution_count": null
			}
		]
	}
}
{
	"name": "Homework 2 EDA",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "openweather",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9beb2684-1c80-4a98-90f2-10d5bf9b7ae6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5d043d5b-a1ca-4e81-88e6-fac0964cefde/resourceGroups/DS598-Anthony-Huang/providers/Microsoft.Synapse/workspaces/anthonyhuangsynapse/bigDataPools/openweather",
				"name": "openweather",
				"type": "Spark",
				"endpoint": "https://anthonyhuangsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/openweather",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Set up the configuration for accessing the storage account\n",
					"storage_account_name = \"ds598anthonyhuangstorage\"\n",
					"storage_account_key = \"\"\n",
					"\n",
					"spark.conf.set(\n",
					"    \"fs.azure.account.key.\" + storage_account_name + \".dfs.core.windows.net\",\n",
					"    storage_account_key\n",
					")\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Read data directly from ADLS Gen2\n",
					"container_name = \"ds598anthonyhuangblobcontainer\"\n",
					"air_pollution_folder_path = \"bronze/data/2.5/air_pollution\"  # Folder, not a single file\n",
					"historical_weather_folder_path = \"bronze/historical_weather\"\n",
					"\n",
					"# Read all JSON files in the folder\n",
					"air_pollution_df = spark.read.json(f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{air_pollution_folder_path}\")\n",
					"historical_weather_df = spark.read.json(f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{historical_weather_folder_path}\")\n",
					"# Show the DataFrame"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col, explode\n",
					"import matplotlib.pyplot as plt\n",
					"import seaborn as sns\n",
					"import plotly.express as px\n",
					"import pandas as pd"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"   historical_weather_df.printSchema()\n",
					"\n",
					"   air_pollution_df.printSchema()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"air_pollution = air_pollution_df.select(\n",
					"    explode(col(\"list\")).alias(\"list_element\")\n",
					").select(\n",
					"    col(\"list_element.dt\").alias(\"timestamp\"),\n",
					"    col(\"list_element.main.aqi\").alias(\"aqi\"),\n",
					"    col(\"list_element.components.co\").alias(\"carbon_monoxide\"),\n",
					"    col(\"list_element.components.no\").alias(\"nitric_oxide\"),\n",
					"    col(\"list_element.components.no2\").alias(\"nitrogen_dioxide\"),\n",
					"    col(\"list_element.components.o3\").alias(\"ozone\"),\n",
					"    col(\"list_element.components.so2\").alias(\"sulfur_dioxide\"),\n",
					"    col(\"list_element.components.pm2_5\").alias(\"pm2_5\"),\n",
					"    col(\"list_element.components.pm10\").alias(\"pm10\"),\n",
					"    col(\"list_element.components.nh3\").alias(\"ammonia\")\n",
					")\n",
					"air_pollution = air_pollution.toPandas()"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"source": [
					"historical_weather = historical_weather_df.select(\n",
					"    explode(col(\"list\")).alias(\"list_element\")\n",
					").select(\n",
					"    col(\"list_element.dt\").alias(\"timestamp\"),\n",
					"    col(\"list_element.main.temp\").alias(\"temperature\"),\n",
					"    col(\"list_element.main.feels_like\").alias(\"feels_like_temp\"),\n",
					"    col(\"list_element.main.temp_max\").alias(\"max_temperature\"),\n",
					"    col(\"list_element.main.temp_min\").alias(\"min_temperature\"),\n",
					"    col(\"list_element.main.humidity\").alias(\"humidity\"),\n",
					"    col(\"list_element.main.pressure\").alias(\"pressure\"),\n",
					"    col(\"list_element.wind.speed\").alias(\"wind_speed\"),\n",
					"    col(\"list_element.wind.deg\").alias(\"wind_direction\"),\n",
					"    col(\"list_element.wind.gust\").alias(\"wind_gust\"),\n",
					"    col(\"list_element.clouds.all\").alias(\"cloud_cover\"),\n",
					"    col(\"list_element.rain.1h\").alias(\"rain_1h\"),\n",
					"    col(\"list_element.rain.3h\").alias(\"rain_3h\"),\n",
					"    col(\"list_element.snow.1h\").alias(\"snow_1h\"),\n",
					"    explode(col(\"list_element.weather\")).alias(\"weather_element\")\n",
					").select(\n",
					"    col(\"timestamp\"),\n",
					"    col(\"temperature\"),\n",
					"    col(\"feels_like_temp\"),\n",
					"    col(\"max_temperature\"),\n",
					"    col(\"min_temperature\"),\n",
					"    col(\"humidity\"),\n",
					"    col(\"pressure\"),\n",
					"    col(\"wind_speed\"),\n",
					"    col(\"wind_direction\"),\n",
					"    col(\"wind_gust\"),\n",
					"    col(\"cloud_cover\"),\n",
					"    col(\"rain_1h\"),\n",
					"    col(\"rain_3h\"),\n",
					"    col(\"snow_1h\"),\n",
					"    col(\"weather_element.description\").alias(\"weather_description\")\n",
					")\n",
					"historical_weather = historical_weather.toPandas()"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"source": [
					"air_pollution.head(10)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"source": [
					"historical_weather.head(10)"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"source": [
					"historical_weather[\"temperaturec\"] = historical_weather[\"temperature\"] - 273.15\n",
					"fig_temp_dist, ax_temp_dist = plt.subplots(figsize=(10, 6))\n",
					"sns.histplot(historical_weather[\"temperaturec\"], bins=30, kde=True, color=\"blue\", ax=ax_temp_dist)\n",
					"ax_temp_dist.set_xlabel(\"Temperature (°C)\")\n",
					"ax_temp_dist.set_ylabel(\"Frequency\")\n",
					"ax_temp_dist.set_title(\"Distribution of Temperature\")\n",
					"ax_temp_dist.grid(True)"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"source": [
					"fig_aqi_dist, ax_aqi_dist = plt.subplots(figsize=(10, 6))\n",
					"sns.countplot(x=air_pollution[\"aqi\"], palette=\"Reds\", ax=ax_aqi_dist)\n",
					"ax_aqi_dist.set_xlabel(\"Air Quality Index (AQI)\")\n",
					"ax_aqi_dist.set_ylabel(\"Frequency\")\n",
					"ax_aqi_dist.set_title(\"Distribution of AQI Levels\")\n",
					"ax_aqi_dist.grid(True)"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"source": [
					"fig_temp_humidity, ax_temp_humidity = plt.subplots(figsize=(10, 6))\n",
					"sns.scatterplot(\n",
					"    x=historical_weather[\"temperaturec\"], \n",
					"    y=historical_weather[\"humidity\"], \n",
					"    alpha=0.7, color=\"green\", ax=ax_temp_humidity\n",
					")\n",
					"ax_temp_humidity.set_xlabel(\"Temperature (°C)\")\n",
					"ax_temp_humidity.set_ylabel(\"Humidity (%)\")\n",
					"ax_temp_humidity.set_title(\"Temperature vs Humidity\")\n",
					"ax_temp_humidity.grid(True)"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"source": [
					"fig_aqi_co = px.scatter(\n",
					"    air_pollution, \n",
					"    x=\"carbon_monoxide\", \n",
					"    y=\"aqi\", \n",
					"    title=\"AQI vs CO Levels\",\n",
					"    labels={\"carbon_monoxide\": \"Carbon Monoxide (CO)\", \"aqi\": \"Air Quality Index\"},\n",
					"    color=\"aqi\", size=\"carbon_monoxide\")\n",
					"fig_aqi_co.show()"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Display schema for weather data\n",
					"#ex: ____.printSchema()\n",
					"# Display schema for air pollution data\n",
					"\n",
					"# Convert Spark DataFrame to Pandas DataFrame for summary statistics (.toPandas())\n",
					"\n",
					"# Summary statistics for weather data\n",
					"\n",
					"# Summary statistics for air pollution data\n",
					"\n",
					"\n",
					"#Use built-in visualization tools in Synapse notebooks or use external libraries like matplotlib, seaborn, or plotly.\n",
					"#Minimum of 4 different types of visualizations.\n",
					"#Examples: Distribution of temperature (with weather data), Distribution of AQI (air pollution data),\n",
					"#Scatter plot of temperature vs humidity (weather data), Scatter plot of AQI vs CO (air pollution data).\n",
					"#Terminate the Cluster Stop your session once completed with all the tasks."
				],
				"execution_count": null
			}
		]
	}
}
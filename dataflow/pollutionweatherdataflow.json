{
	"name": "pollutionweatherdataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "pollutionsink",
						"type": "DatasetReference"
					},
					"name": "source"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn"
				},
				{
					"name": "filter"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select"
				},
				{
					"name": "flatten"
				}
			],
			"scriptLines": [
				"source(output(",
				"          coord as (lon as double, lat as double),",
				"          list as (main as (aqi as integer), components as (co as double, no as integer, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[],",
				"          message as string,",
				"          cod as string,",
				"          city_id as integer,",
				"          calctime as double,",
				"          cnt as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments',",
				"     wildcardPaths:['bronze/data/2.5/air_polluton/*']) ~> source",
				"flatten derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
				"          location = 'Boston') ~> derivedColumn",
				"derivedColumn filter(!isNull(temp) && !isNull(humidity) && length(toString(corrected_timestamp)) == 10",
				") ~> filter",
				"filter derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
				"          id = concat('Boston_', toString(corrected_timestamp)),",
				"          temp_C = round(temp - 273.15, 2),",
				"          temp_min_C = round(temp_min - 273.15, 2),",
				"          temp_max_C = round(temp_max - 273.15, 2),",
				"          feels_like_C = round(feels_like - 273.15, 2),",
				"          temp_F = round((temp - 273.15) * 9 / 5 + 32, 2),",
				"          temp_min_F = round((temp_min - 273.15) * 9 / 5 + 32, 2),",
				"          temp_max_F = round((temp_max - 273.15) * 9 / 5 + 32, 2),",
				"          feels_like_F = round((feels_like - 273.15) * 9 / 5 + 32, 2),",
				"          lon = -71.0589,",
				"          lat = 42.3601,",
				"          weather_id_value = toInteger(toString(weather_id)),",
				"          weather_main_value = toString(weather_main),",
				"          weather_description_value = toString(weather_description),",
				"          weather_icon_value = toString(weather_icon)) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          clouds_all,",
				"          feels_like_K = feels_like,",
				"          humidity,",
				"          pressure,",
				"          temp_K = temp,",
				"          temp_max_K = temp_max,",
				"          temp_min_K = temp_min,",
				"          wind_deg,",
				"          wind_gust,",
				"          wind_speed,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id,",
				"          temp_C,",
				"          temp_min_C,",
				"          temp_max_C,",
				"          feels_like_C,",
				"          temp_F,",
				"          temp_min_F,",
				"          temp_max_F,",
				"          feels_like_F,",
				"          lon,",
				"          lat,",
				"          weather_id_value,",
				"          weather_main_value,",
				"          weather_description_value,",
				"          weather_icon_value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"source foldDown(unroll(list),",
				"     mapColumn(",
				"          timestamp = list.dt,",
				"          message,",
				"          cod,",
				"          city_id,",
				"          calctime,",
				"          cnt,",
				"          lon = coord.lon,",
				"          lat = coord.lat,",
				"          aqi = list.main.aqi,",
				"          co = list.components.co,",
				"          no = list.components.no,",
				"          no2 = list.components.no2,",
				"          o3 = list.components.o3,",
				"          so2 = list.components.so2,",
				"          pm2_5 = list.components.pm2_5,",
				"          pm10 = list.components.pm10,",
				"          nh3 = list.components.nh3",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten",
				"select sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink"
			]
		}
	}
}
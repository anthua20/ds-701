{
	"name": "pollutiondataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "pollutionsink",
						"type": "DatasetReference"
					},
					"name": "source"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "silverparquetoutputs",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn"
				},
				{
					"name": "filter"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select"
				},
				{
					"name": "flatten"
				}
			],
			"scriptLines": [
				"source(output(",
				"          coord as (lon as double, lat as double),",
				"          list as (main as (aqi as integer), components as (co as double, no as integer, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[],",
				"          message as string,",
				"          cod as string,",
				"          city_id as integer,",
				"          calctime as double,",
				"          cnt as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments',",
				"     wildcardPaths:['bronze/data/2.5/air_pollution/*'],",
				"     partitionBy('hash', 1)) ~> source",
				"flatten derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
				"          location = 'Boston',",
				"     partitionBy('hash', 1)) ~> derivedColumn",
				"derivedColumn filter(!isNull(aqi) && !isNull(corrected_timestamp) && length(toString(corrected_timestamp)) == 10,",
				"     partitionBy('hash', 1)) ~> filter",
				"filter derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
				"          id = concat('Boston_', toString(corrected_timestamp)),",
				"          co = round(co , 2),",
				"          no2 = round(no2 , 2),",
				"          o3 = round(o3 , 2),",
				"          so2 = round(so2 , 2),",
				"          pm2_5 = round(pm2_5 , 2),",
				"          pm10 = round(pm10 , 2),",
				"          nh3 = round(nh3 , 2),",
				"     partitionBy('hash', 1)) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          lon,",
				"          lat,",
				"          aqi,",
				"          co,",
				"          no,",
				"          no2,",
				"          o3,",
				"          so2,",
				"          pm2_5,",
				"          pm10,",
				"          nh3,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"source foldDown(unroll(list),",
				"     mapColumn(",
				"          timestamp = list.dt,",
				"          message,",
				"          cod,",
				"          city_id,",
				"          calctime,",
				"          cnt,",
				"          lon = coord.lon,",
				"          lat = coord.lat,",
				"          aqi = list.main.aqi,",
				"          co = list.components.co,",
				"          no = list.components.no,",
				"          no2 = list.components.no2,",
				"          o3 = list.components.o3,",
				"          so2 = list.components.so2,",
				"          pm2_5 = list.components.pm2_5,",
				"          pm10 = list.components.pm10,",
				"          nh3 = list.components.nh3",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten",
				"select sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['pollution_silver'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink"
			]
		}
	}
}